  // function MyVideoConference() {
  //   // `useTracks` returns all camera and screen share tracks. If a user
  //   // joins without a published camera track, a placeholder track is returned.
  //   const tracks = useTracks(
  //     [
  //       { source: Track.Source.Camera, withPlaceholder: true },
  //       { source: Track.Source.ScreenShare, withPlaceholder: false },
  //     ],
  //     { onlySubscribed: false },
  //   );
  //   return (
  //     <GridLayout tracks={tracks} style={{ height: 'calc(100vh - var(--lk-control-bar-height))' }}>
  //       {/* The GridLayout accepts zero or one child. The child is used
  //       as a template to render all passed in tracks. */}
  //        <TrackLoop tracks={tracks}>
  //         <TrackRefContext.Consumer>
  //           {(trackRef) => trackRef && <CustomParticipantTile trackRef={trackRef} />}
  //         </TrackRefContext.Consumer>
  //       </TrackLoop>
  //     </GridLayout>
  //   );
  // }

  // function CustomParticipantTile({ trackRef }) {
  //   const { htmlProps, onParticipantClick, disableSpeakingIndicator } = useParticipantTile({ trackRef });

  //   return (
  //     <ParticipantTile
  //       trackRef={trackRef}
  //       onParticipantClick={onParticipantClick}
  //       disableSpeakingIndicator={disableSpeakingIndicator}
  //       {...htmlProps} // Spread the props for additional attributes
  //     >
  //       <img src={trackRef.participant.avatarUrl || 'default-avatar.jpg'} alt={`${trackRef.participant.name}'s avatar`} />
  //       <span>{trackRef.participant.name}</span>
  //     </ParticipantTile>
  //   );
  // }
